06 객체

객체는 우리가 변수 혹은 상수를 사용하게 될때
하나의 이름에 여러종류의 값을 넣게 해줌.

객체에 값을 집어 넣을땐

key : value

형태로 넣으며, 키에 해당하는 부분은 공백이 없어야 한다.
만약 공백이 있어야 한다면, 이를 '' 로 감싸서 문자열로 넣어줌.

1 함수에서 객체를 파라미터로 받기

함수를 새로 만들어서 방금 만든 객체를 파라미터로 받아와보자.

2 객체 비구조화 할당 (객체 구조 분해)

print 함수를 보면 파라미터로 받아온 hero 내부의 값을 
조회 할때 마다 hero.을 입력하고 있는데,
객체 비구조화 할당 이라는 문법을 사용하면 코드를 더욱 짧고
보기좋게 작성 할수 있다.

const { alias, name, actor } = hero;

이 코드가 객체에서 값들을 추출해서 새로운 상수로 선언해 준다.
여기서 더 나아가 파라미터 단계에서 객체 비구조화 할당을
할수도 있다.

function printt({ alias, name, actor }) {}

3 객체 안에 함수 넣기 

함수가 객체 안에 들어가게 되면, this 는 자신이 속한 객체를 가르킴.
함수를 선언할땐 function name() 의 name 이 없어도 된다.
화살표 함수로 선언한다면, 가르키는 this가 달라서 오류가 난다.

4 Getter 함수와 Setter 함수 

객체 안에 Getter 함수와 Setter 함수를 설정하는 방법?
객체를 만들고 나면, 객체안의 값을 수정할수도 있게된다.

4-1 getter

Getter 함수와 Setter 함수를 사용하게 되면
특정 값을 바꾸거나, 특정값을 조회하려고 할때
우리가 원하는 코드를 실행 시킬수 있다.

numbers.sum() 을 한것이 아닌 numbers.sum 을 조회했을 뿐인데,
함수가 실행되고 그 결과값이 출력됨.

이런식으로 Getter 함수는 특정 값을 조회 할때
우리가 설정한 함수로 연산된 값을 반환합니다.

4-2 setter

Setter 함수를 설정할땐 함수의 앞부분에 set 키워드 붙임.
Setter 함수를 설정하고 나면, numbers.a = 5 이렇게
값을 설정했을때 5 를 함수의 파라미터로 받아오게 됨.
위 코드에서는 객체 안에 _a, _b 라는 숫자를 선언하고,
이 값들을 위한 Getter 와 Setter 함수를 설정.

Getter 는 numbers.sum 이 조회 될때마다 덧셈 되지만,
Setter 는 a 혹은 b 값이 바뀔때마다 sum 값 연산.
