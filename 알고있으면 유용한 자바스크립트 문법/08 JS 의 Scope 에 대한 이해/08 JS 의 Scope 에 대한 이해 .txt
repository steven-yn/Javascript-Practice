08 JS 의 Scope 에 대한 이해 

Scope 란, 우리가 변수, 함수 등을 선언하게 될때 해당 변수, 함수가
유효한 범위를 의미.

1. Global (전역) Scope : 코드의 모든 범위
2. Function (함수) Scope : 함수 안에서만
3. Block (블록) Scope : if, for, switch 등 특정 블록 내부만

1. 예시를 통한 Scope 이해

코드의 맨 윗줄에서 선언된 value 값은 Global Scope 로 선언된 값입니다. Global Scope 로 선언된 값은 어디서든지 사용이 가능합니다. myFunction 에서 바로 사용을 할 수 있었지요?

otherFunction 에서는 함수 내부에서 value 값을 'bye!' 로
새로 선언을 해주었습니다. 이렇게 되면, value 라는 값은
Function Scope 로 지정이 되서 해당 값은 otherFunction 내부에서만
유효한 값이 됩니다.
이렇게 값을 설정한다고 해서 기존에 Global Scope 로 선언된 value 값이
바뀌지 않습니다.

2. 또다른 예시 

myFunction 내부에 anotherValue 라는 새로운 값을 선언했고,
functionInside 라는 함수도 선언을 했습니다.
functionInside 함수에서는 myFunction 에서 선언한 value 값과
anotherValue 값을 조회 할 수 있습니다.
반면, myFunction 밖에서는 anotherValue 를 조회 할 수 없습니다.

이제, 또 다른 예시를 알아봅시다.

3. 또또 다른 예시

const 로 선언한 값은 Block Scope 로 선언이 됩니다.
따라서, if 문 같은 블록 내에서 새로운 변수/상수를 선언하게 된다면,
해당 블록 내부에서만 사용이 가능하며,
블록 밖의 범위에서 똑같은 이름을 가진 값이 있다고 해도 영향을 주지 않습니다.

let 또한 마찬가지 입니다.

4. var 의 경우 

var 는 Function Scope 로 선언이 된다. ( 조건문 블록 내라도 )
그래서 블록 밖의 value 에도 영향을 미침 

5. Hoistiong 이해하기 

JS 에서 아직 선언되지 않은 함수/변수를 "글어올려서" 사용할수 있는 
JS의 작동방식을 의미함.

함수를 선언하기전에 호출부터 했음에도, 코드는 정상적으로 작동.
이게 잘 작동하는 이유는, JS 엔진이 코드를 해석하는 과정에서 함수선언이
먼저 되도록 받아들이게 된다.

var 의 경우,

console.log(number);
var number = 2; // undefined

==>
var number;
console.log(number);
number = 2;

이렇게 받아들여짐.

반면, const / let 은 hoisting 이 발생하지않고 에러가 발생.
let과 const가 호이스팅이 되지 않는게 아니라 호이스팅은 되지만
변수생성과정이 달라서 일시적인 사각지대(TDZ)가 생성되어
초기화전엔 액세스할수 없다는 레퍼런스 에러를 표시

babel 을 사용한다면 const 와 let 이 var 로 변환되서 오류가 발생 X

Hoisting 은 JS 엔진이 가진 성질이며, 일부러 할필요 없이 방지하는것이 좋다.
이해하기 어렵기 때문에 유지보수도 힘들어지고 의도치 않는 결과물이 나타나기 쉽다.

따라서 호출 부터 하지말고 선언 부터 하는것이 좋고,
var 대신 const 와 let 위주로 사용하라.
ESLint 에서 Hoisting 코드를 잡아주기도 함.

