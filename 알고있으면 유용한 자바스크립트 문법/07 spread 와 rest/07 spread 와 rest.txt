07 spread 와 rest

ES6 에서 도입된 spread 와 rest 문법.
서로 완전히 다르지만, 은근히 좀 비슷하다.

1. spread

spread 의 의미는 펼치다, 퍼뜨리다 이다.
이 문법을 사용하면, 객체 혼은 배열을 펼칠수 있다.

기존의 것을 건들이지 않고, 새로운 객체를 만들때 이전에 쓰던 속성을
그대로 사용하면서 추가적으로 다른 속성을 추가할때 유용한 문법이 spread 이다.

... < 이 문자가 spread 연산자.
배열에서도 사용가능.

기존의 배열은 건들지 않으면서, 새로운 배열에 추가 항목을 넣었음.
하나의 배열을 만들때 여러번 사용도 가능.

2. rest

rest 는 생김새가 거의 비슷한데, 역할이 매우 다르다.
rest 는 객체, 배열, 함수의 파라미터에서 사용이 가능.

2-1. 객체에서의 rest

...rest 가 rest 연산자.
객체와 배열에서 사용시에는 비구조화 할당 문법과 함께 추출하고 남은
나머지 값을 넣는 용도로 사용. 꼭 rest 로 만들지 않아도 된다.
남은 값이 있으면 여러번 사용도 가능

2-2. 배열에서의 rest 

배열 비구조화 할당을 통해 원하는 값을 밖으로 꺼내고,
나머지 값을 rest 안에 넣었다.

const [...rest, last] = numbers; 형태는 불가.

2-3 함수 파라밑에서의 rest

우리가 파라미터로 넣어준 모든 값들을 합해주는 함수를 만든다고 가정.
sum 함수가 7개의 파라미터를 받아오는데, 아래에서 사용할때 6개만 넣어줌.

그러면 g 값이 undefined 가 되기 때문에 sum 에 더하는 과정에서
+= undefined 하게되면 결과가 NaN 이 되버림. 그렇기 때문에 함수에서
하나하나 유효한 값인지 확인을 해줬다.

함수의 파라미터가 몇개가 될지 모르는 상황에서 rest 파라미터를 사용하면
매우 유용.

...rest 를 통해 그냥 주는만큼 파라미터를 받았음.

3. 함수 인자와 spread

파라미터 와 인자의 차이.
파라미터 = 함수에서 값을 읽어올때
인자 = 그 값을 함수에서 넣어줄때

함수 파라미터에서 rest 를 사용한것과 반대의 역할.
예를 들어 배열안에 있는 원소들을 모두 파라미터로 넣어주고 싶다고 가정.

