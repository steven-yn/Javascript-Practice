01 promise

프로미스는 비동기 작업을 조금더 편하게 처리하도록 ES6 에 도입된 기능.
이전에는 비동기 작업을 처리할때 콜백함수로 처리했다.
콜백함수 처리는 비동기 작업이 많아질 경우 코드가 난잡해지게 됨.

숫자 n 을 파라미터로 받아와서 다섯번에 걸쳐 1초마다 1씩 더해서 출력하는
작업을 setTimeout 으로 구현

콜백함수를 사용해서 비동기적으로 처리해야하는 일이 많아질수록,
코드의 깊이가 계속 깊어지는 현상이 있다.
Promise 를 사용하면 이렇게 코드의 깊이가 깊어지는 현상을 방지할 수 있다.

1. Promise 만들기

const myPromise = new Promise((resolve, reject) => {
  // 구현..
})

Promise 는 성공할수도 있고, 실패할 수도 있다.
성공 할땐 resolve 를 호출해주면 되고, 실패할땐 reject 를 호출.
실패하는 상황 고려하지않고, 1초뒤에 성공시키는 상황에 대해 구현.

resolve 를 호출할때 특정 값을 파라미터로 넣어주면,
이 값을 작업이 끝나고 나서 사용할수 있다.
작업이 끝나고 나서 또 다른 작업을 해야할땐 Promise 뒤에
.then(...) 을 붙여서 사용.

실패하는 상황은 reject 를 사용하고, .catch 를 통해
실패했을시 수행할 작업을 설정.

여기까지만 보면, 결국 함수를 전달하는건데,
뭐가 다르지 싶을수도 있습니다.
하지만, Promise 의 속성 중에는,
만약 then 내부에 넣은 함수에서 또 Promise 를 리턴하게 된다면,
연달아서 사용 할 수 있습니다.

Promise 를 사용하면, 비동기 작업의 개수가 많아져도 코드깊이가
깊어지지 않게됨.

하지만 불편한점이 있음.
에러를 잡을때 몇번째에서 발생했는지 알아내기도 어렵고
특정 조건에 따라 분기를 나누는 작업도 어렵고,
특정 값을 공유해가면서 작업을 처리하기도 까다로움.

