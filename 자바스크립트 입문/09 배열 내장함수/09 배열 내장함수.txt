09 배열 내장함수 

다양한 내장함수 들에 대해 알아보자.

1 forEach((내부에서 사용할 각원소를 가리키는 파라미터)처리할 함수)

forEach 는 배열 안의 원소(한번에 한 원소씩)를 전부 꺼내서 보여줌.

이렇게 함수 형태의 파라미터를 전달하는 것을 콜백함수 라고 부른다.
함수를 등록해주면, forEach 가 실행해줌.

2 map(변화를 주는 함수)

배열안의 각 원소를 변환할때 사용되며, 새로운 배열을 반환함.
배열안의 모든 숫자를 제곱해서 새로운 배열 만들기?

map 함수의 파라미터 로는 변화를 주는 함수 전달 ( 변화함수 )
내부의 모든값에 대해 square 변화함수에 따라 제곱을 해서 새로운 배열 생성.

3 indexOf(element)

원하는 항목이 몇번째 원소인지 찾아주는 함수.
토르가 몇번째 항목 ?

4. findIndex((각 원소의 값) => 검사할 조건함수)

배열안에 값이 숫자, 문자열, 또는 불리언 이라면 찾고자 하는 항목이
몇번째 원소인지 알아내려면 indexOf 를 사용.
하지만, 배열안에 있는 값이 객체이거나, 배열이라면 indexOf 로 찾을수 없다.

5. find((각 원소의 값) => 검사할 조건함수)

찾아낸 값이 몇번쨰 인지 알아내는게 아닌, 찾아낸 값 자체를 반환.
-> 객체 id 로 검사했다면 객체를 반환
해당하는 조건이 여러개 일경우 더 앞순서의 원소에서 정지.

6. filter((각 원소의 값) => 검사할 조건함수)

배열에서 특정 조건을 만족하는 값들만 따로 추출해서 새로운 배열을 만듬.
예를 들어, todos 배열에서 done 값이 false 인 항목만 따로 추출해서
새로운 배열 만들기. 

7. splice(지울 index (선택자), index 시점으로 부터 삭제할 개수)

배열에서 특정 항목 제거시 사용. 새로운 배열 생성이 아닌 기존 배열.
몇번째 index 인지 알아낸 후 몇개 지울것인지 선택해서 지워줄수 있다.

8. slice(start point, end point) 

splice 랑 조금 비슷하지만, 기존의 배열은 건들지 않는다.

9. shift() 와 pop()

shift 는 맨앞의 첫번째 원소를 배열에서 추출. 배열에 있던 기존 원소는 사라짐.
pop 은 맨뒤.

10. unshift(넣을 값)

배열의 맨앞에 새 원소 추가.

11. concat(이어붙일 배열)

여러개의 배열을 하나의 배열로 합쳐줌.
기존 배열은 건드리지 않음.

12. join(합치면서 원소마다 붙일 string)
배열안의 값들을 문자열 형태로 합쳐줌.
기존 배열은 건드리지 않음

13. reduce(((누적값, 현재값) => {}), 초깃값, key, 자기 자신 배열)
reduce 함수에는 두개의 파라미터를 전달합니다. 
첫번째 파라미터는 accumulator 와 current 를 파라미터로 가져와서
결과를 반환하는 콜백함수이구요,
두번째 파라미터는 reduce 함수에서 사용 할 초깃값입니다.
여기서 accumulator 는 누적된 값을 의미합니다.

배열을 처음부터 끝까지 반복하면서 우리가 전달한 콜백 함수가 호출이 되는데요,
가장 처음엔 accumulator 값이 0 입니다.
이 값이 0인 이유는 우리가 두번째 파라미터인 초깃값으로 0을 설정했기 때문입니다.

처음 콜백 함수가 호출되면, 0 + 1 을 해서 1이 반환됩니다.
이렇게 1일 반환되면 그 다음 번에 콜백함수가 호출 될 때
accumulator 값으로 사용됩니다.

콜백함수가 두번째로 호출 될 땐 1 + 2 를 해서 3이되고,
이 값이 세번째로 호출될 때의 accumulator 가 됩니다.

그래서 쭉- 누적돼서 결과물 15가 나타나는 것 입니다.

reduce 를 사용해서 평균도 계산 할 수 있습니다. 평균을 계산하려면,
가장 마지막 숫자를 더하고 나서 배열의 length 로 나누어주어야 합니다.

위 코드의 reduce 에서 사용한 콜백함수에서는 추가 파라미터로 index
와 array 를 받아왔습니다. index 는 현재 처리하고 있는 항목이
몇번째인지 가르키고, array 는 현재 처리하고 있는 배열 자신을 의미합니다.